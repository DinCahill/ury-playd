// This file is part of playd.
// playd is licensed under the MIT licence: see LICENSE.txt.

/**
 * @file
 * Declaration of the Player class, and associated types.
 * @see player.cpp
 */

#ifndef PLAYD_PLAYER_HPP
#define PLAYD_PLAYER_HPP

#include <cstdint>
#include <map>
#include <memory>
#include <string>
#include <utility>
#include <vector>

#include "audio/audio_system.hpp"
#include "audio/audio.hpp"
#include "response.hpp"

/**
 * A Player contains a loaded audio file and a command API for manipulating it.
 * @see Audio
 * @see AudioSystem
 */
class Player
{
public:
	/**
	 * Constructs a Player.
	 * @param audio The AudioSystem to be used by the player.
	 */
	Player(AudioSystem &audio);

	/// Deleted copy constructor.
	Player(const Player &) = delete;

	/// Deleted copy-assignment constructor.
	Player &operator=(const Player &) = delete;

	/**
	 * Handles a command line.
	 * @param words A reference to the list of words in the command.
	 * @param id If present, the ID of the client requesting the
	 *   command, and, thus, the target of any unicast responses
	 *   this command generates.
	 * @return Whether the command succeeded.
	 */
	Response RunCommand(const std::vector<std::string> &words,
	                         size_t id = 0);

	/**
	 * Sets the sink to which this Player shall send responses.
	 * This sink shall be the target for WelcomeClient, as well as
	 * any responses generated by RunCommand or Update.
	 * @param sink The response sink.
	 */
	void SetSink(ResponseSink &sink);

	/**
	 * Instructs the Player to perform a cycle of work.
	 * This includes decoding the next frame and responding to commands.
	 * @return Whether the player has more cycles of work to do.
	 */
	bool Update();

	/**
	 * Sends welcome/current status information to a new client.
	 * @param id The ID of the new client inside the IO system.
	 * @see DumpState
	 */
	void WelcomeClient(size_t id) const;

private:
	AudioSystem &audio;          ///< The system used for loading audio.
	std::unique_ptr<Audio> file; ///< The currently loaded audio file.
	bool is_running;             ///< Whether the Player is running.
	const ResponseSink *sink;    ///< The sink for audio responses.
	std::uint64_t last_pos;      ///< The last position broadcast.

	//
	// Playback control
	//

	/**
	 * Tells the audio file to start or stop playing.
	 * @param tag The tag of the request calling this command.
	 *   For unsolicited dumps, use Response::NOREQUEST.
	 * @param playing True if playing; false otherwise.
	 * @see Play
	 * @see Stop
	 */
	Response SetPlaying(const std::string &tag, bool playing);

	/**
	 * Ejects the current loaded song, if any.
	 * @param tag The tag of the request calling this command.
	 *   For unsolicited dumps, use Response::NOREQUEST.
	 * @return Whether the ejection succeeded.
	 */
	Response Eject(const std::string &tag);

	/**
	 * Loads a track.
	 * @param tag The tag of the request calling this command.
	 *   For unsolicited dumps, use Response::NOREQUEST.
	 * @param path The absolute path to a track to load.
	 * @return Whether the load succeeded.
	 */
	Response Load(const std::string &tag, const std::string &path);

	/**
	 * Ends a file, stopping and rewinding.
	 * @param tag The tag of the request calling this command.
	 *   For unsolicited dumps, use Response::NOREQUEST.
	 * @return Whether the end succeeded.
	 */
	Response End(const std::string &tag);

	//
	// Seeking
	//

	/**
	 * Seeks to a given position in the current file.
	 * @param tag The tag of the request calling this command.
	 *   For unsolicited dumps, use Response::NOREQUEST.
	 * @param pos_str A string containing a timestamp, in microseconds
	 * @return Whether the seek succeeded.
	 */
	Response Pos(const std::string &tag, const std::string &pos_str);

	/**
	 * Parses pos_str as a seek timestamp.
	 * @param pos_str The time string to be parsed.
	 * @return The parsed time.
	 * @exception std::out_of_range
	 *   See http://www.cplusplus.com/reference/string/stoull/#exceptions
	 * @exception std::invalid_argument
	 *   See http://www.cplusplus.com/reference/string/stoull/#exceptions
	 * @exception SeekError
	 *   Raised if checks beyond those done by stoull fail.
	 */
	static std::uint64_t PosParse(const std::string &pos_str);

	/**
	 * Performs an actual seek.
	 * This does not do any EOF handling.
	 * @param tag The tag of the request calling this command.
	 *   For unsolicited dumps, use Response::NOREQUEST.
	 * @param pos The new position, in microseconds.
	 * @exception SeekError
	 *   Raised if the seek is out of range (usually EOF).
	 * @see Player::Seek
	 */
	void PosRaw(const std::string &tag, std::uint64_t pos);

	//
	// Other
	//

	/**
	 * Quits playd.
	 * @param tag The tag of the request calling this command.
	 *   For unsolicited dumps, use Response::NOREQUEST.
	 * @return Whether the quit succeeded.
	 */
	Response Quit(const std::string &tag);

	/**
	 * Dumps the current player state to the given ID.
	 *
	 * @param id The ID of the connection to which the Player should
	 *   route any responses.  For broadcasts, use 0.
	 * @param tag The tag of the request calling this command.
	 *   For unsolicited dumps, use Response::NOREQUEST.
	 * @return The result of dumping, which is always success.
	 */
	Response Dump(size_t id, const std::string &tag) const;

	/**
	 * Emits everything that would be sent via a Dump to the given ID.
	 *
	 * This neither finishes with DUMP, nor checks for sink==nullptr,
	 * nor returns a Response.
	 *
	 * @param id The ID of the connection to which the Player should
	 *   route any responses.  For broadcasts, use 0.
	 * @param tag The tag of the request calling this command.
	 *   For unsolicited dumps, use Response::NOREQUEST.
	 *
	 * @see Dump
	 */
	void DumpRaw(size_t id, const std::string &tag) const;

	/**
	 * Emits a response for the current audio state to the sink.
	 *
	 * @param id The ID of the connection to which the Player should
	 *   route any responses.  For broadcasts, use 0.
	 * @param tag The tag of the request calling this command.
	 *   For unsolicited dumps, use Response::NOREQUEST.
	 *
	 * @see DumpRaw
	 */
	 void DumpState(size_t id, const std::string &tag) const;

	/**
	 * Determines whether we can broadcast a POS response.
	 *
	 * To prevent spewing massive amounts of POS responses, we only send a
	 * broadcast if the number of seconds has changed since the last
	 * time CanAnnounceTime() was called.
	 *
	 * This is *not* idempotent.  A CanAnnounceTime(x) less than one second
	 * before a CanAnnounceTime(x) will _always_ be false.
	 *
	 * @param micros The value of the POS response, in microseconds.
	 * @return Whether it is polite to broadcast POS.
	 */
	bool CanAnnounceTime(std::uint64_t micros);
};

#endif // PLAYD_PLAYER_HPP
